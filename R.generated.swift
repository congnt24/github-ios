//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `empty_set_filled`.
    static let empty_set_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_set_filled")
    /// Image `icons8-search_filled`.
    static let icons8Search_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icons8-search_filled")
    
    /// `UIImage(named: "empty_set_filled", bundle: ..., traitCollection: ...)`
    static func empty_set_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_set_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icons8-search_filled", bundle: ..., traitCollection: ...)`
    static func icons8Search_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icons8Search_filled, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `EmptyTableViewCell`.
    static let emptyTableViewCell = _R.nib._EmptyTableViewCell()
    /// Nib `RepoTableViewCell`.
    static let repoTableViewCell = _R.nib._RepoTableViewCell()
    
    /// `UINib(name: "EmptyTableViewCell", in: bundle)`
    static func emptyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyTableViewCell)
    }
    
    /// `UINib(name: "RepoTableViewCell", in: bundle)`
    static func repoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repoTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `empty_cell`.
    static let empty_cell: Rswift.ReuseIdentifier<EmptyTableViewCell> = Rswift.ReuseIdentifier(identifier: "empty_cell")
    /// Reuse identifier `homecell2`.
    static let homecell2: Rswift.ReuseIdentifier<RepoTableViewCell> = Rswift.ReuseIdentifier(identifier: "homecell2")
    /// Reuse identifier `homecell`.
    static let homecell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "homecell")
    /// Reuse identifier `left_cell`.
    static let left_cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "left_cell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// en translation: Cancel
      /// 
      /// Locales: en, vi
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Change Language
      /// 
      /// Locales: en, vi
      static let change_language_message = Rswift.StringResource(key: "change_language_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Change Language
      /// 
      /// Locales: en, vi
      static let change_language_title = Rswift.StringResource(key: "change_language_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: English
      /// 
      /// Locales: en, vi
      static let english = Rswift.StringResource(key: "english", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Vietnamese
      /// 
      /// Locales: en, vi
      static let vietnamese = Rswift.StringResource(key: "vietnamese", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: hello2
      /// 
      /// Locales: en, vi
      static let hello = Rswift.StringResource(key: "hello", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      
      /// en translation: Cancel
      /// 
      /// Locales: en, vi
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change Language
      /// 
      /// Locales: en, vi
      static func change_language_message(_: Void = ()) -> String {
        return NSLocalizedString("change_language_message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Change Language
      /// 
      /// Locales: en, vi
      static func change_language_title(_: Void = ()) -> String {
        return NSLocalizedString("change_language_title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: English
      /// 
      /// Locales: en, vi
      static func english(_: Void = ()) -> String {
        return NSLocalizedString("english", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vietnamese
      /// 
      /// Locales: en, vi
      static func vietnamese(_: Void = ()) -> String {
        return NSLocalizedString("vietnamese", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: hello2
      /// 
      /// Locales: en, vi
      static func hello(_: Void = ()) -> String {
        return NSLocalizedString("hello", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 6 localization keys.
    struct main {
      /// vi translation: Detail
      /// 
      /// Locales: vi
      static let pZxPCRsDText = Rswift.StringResource(key: "PZx-PC-RsD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["vi"], comment: nil)
      /// vi translation: Login
      /// 
      /// Locales: vi
      static let aFtGb8xpNormalTitle = Rswift.StringResource(key: "AFt-gb-8xp.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["vi"], comment: nil)
      /// vi translation: Password
      /// 
      /// Locales: vi
      static let xJ5JMGOoPlaceholder = Rswift.StringResource(key: "XJ5-jM-gOo.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["vi"], comment: nil)
      /// vi translation: Search
      /// 
      /// Locales: vi
      static let f5K5TYDPlaceholder = Rswift.StringResource(key: "2F5-K5-tYD.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["vi"], comment: nil)
      /// vi translation: Title
      /// 
      /// Locales: vi
      static let ire3pSfiText = Rswift.StringResource(key: "Ire-3p-sfi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["vi"], comment: nil)
      /// vi translation: Username
      /// 
      /// Locales: vi
      static let x20PjDnIPlaceholder = Rswift.StringResource(key: "X20-Pj-DnI.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["vi"], comment: nil)
      
      /// vi translation: Detail
      /// 
      /// Locales: vi
      static func pZxPCRsDText(_: Void = ()) -> String {
        return NSLocalizedString("PZx-PC-RsD.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// vi translation: Login
      /// 
      /// Locales: vi
      static func aFtGb8xpNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("AFt-gb-8xp.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// vi translation: Password
      /// 
      /// Locales: vi
      static func xJ5JMGOoPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("XJ5-jM-gOo.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// vi translation: Search
      /// 
      /// Locales: vi
      static func f5K5TYDPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("2F5-K5-tYD.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// vi translation: Title
      /// 
      /// Locales: vi
      static func ire3pSfiText(_: Void = ()) -> String {
        return NSLocalizedString("Ire-3p-sfi.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// vi translation: Username
      /// 
      /// Locales: vi
      static func x20PjDnIPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("X20-Pj-DnI.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _EmptyTableViewCell.validate()
    }
    
    struct _EmptyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EmptyTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "empty_cell"
      let name = "EmptyTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EmptyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "empty_set_filled") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'empty_set_filled' is used in nib 'EmptyTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RepoTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RepoTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "homecell2"
      let name = "RepoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RepoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RepoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let home = StoryboardViewControllerResource<HomeViewController>(identifier: "home")
      let left_menu = StoryboardViewControllerResource<LeftViewController>(identifier: "left_menu")
      let login = StoryboardViewControllerResource<LoginViewController>(identifier: "login")
      let name = "Main"
      
      func home(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: home)
      }
      
      func left_menu(_: Void = ()) -> LeftViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: left_menu)
      }
      
      func login(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      static func validate() throws {
        if _R.storyboard.main().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().left_menu() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'left_menu' could not be loaded from storyboard 'Main' as 'LeftViewController'.") }
        if _R.storyboard.main().home() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'home' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}